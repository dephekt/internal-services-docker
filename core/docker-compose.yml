services:
  router:
    image: traefik:latest
    container_name: router
    restart: unless-stopped
    networks:
      proxy:
        aliases:
          - auth.${DOMAIN}
      lan:
        ipv4_address: 192.168.8.241
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/traefik/dynamic:/etc/traefik/dynamic:ro
      - letsencrypt:/letsencrypt
    environment:
      - CLOUDFLARE_DNS_API_TOKEN
      - ACME_EMAIL
      - TRAEFIK_CERTIFICATESRESOLVERS_cf_ACME_EMAIL=${ACME_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_cf_ACME_DNSCHALLENGE_PROVIDER=cloudflare
      - TRAEFIK_CERTIFICATESRESOLVERS_cf_ACME_STORAGE=/letsencrypt/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`router.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/_oauth`))"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=cf"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.services.dashboard.loadbalancer.server.port=1443"
      - "traefik.http.routers.dashboard.middlewares=traefik-forward-auth@file"
      - "traefik.docker.network=proxy"

  auth:
    image: quay.io/keycloak/keycloak:26.3
    container_name: auth
    command: ["start"]
    environment:
      - KEYCLOAK_ADMIN
      - KEYCLOAK_ADMIN_PASSWORD
      - KC_PROXY=edge
      - KC_HOSTNAME=https://auth.${DOMAIN}
      - KC_HOSTNAME_BACKCHANNEL_DYNAMIC=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY_HEADERS=xforwarded
      - KC_DB
      - KC_DB_USERNAME
      - KC_DB_PASSWORD
      - KC_DB_URL
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls.certresolver=cf"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
      - "traefik.docker.network=proxy"
    volumes:
      - keycloak-data:/opt/keycloak/data
    depends_on:
      db:
        condition: service_started

  db:
    image: mariadb:11.4
    container_name: keycloak-db
    restart: unless-stopped
    environment:
      - MARIADB_DATABASE=keycloak
      - MARIADB_USER=${KC_DB_USERNAME}
      - MARIADB_PASSWORD
      - MARIADB_ROOT_PASSWORD
    volumes:
      - keycloak-mariadb:/var/lib/mysql
    networks:
      - proxy

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel run

  router-forward-auth:
    image: mesosphere/traefik-forward-auth:latest
    container_name: router-forward-auth
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - PROVIDER_URI=${TFA_PROVIDER_URI}
      - CLIENT_ID=${ROUTER_FORWARD_AUTH_CLIENT_ID}
      - CLIENT_SECRET=${ROUTER_FORWARD_AUTH_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ROUTER_FORWARD_AUTH_ENCRYPTION_KEY}
      - SECRET=${ROUTER_FORWARD_AUTH_SECRET}
      - AUTH_HOST=router.${DOMAIN}
      - OIDC_GROUPS_CLAIM=groups
    labels:
      - "traefik.http.services.router-forward-auth.loadbalancer.server.port=4181"
      - "traefik.docker.network=proxy"
    depends_on:
      router:
        condition: service_started
      auth:
        condition: service_started
      cloudflared:
        condition: service_started

networks:
  proxy:
    external: true
  lan:
    external: true
    name: core_lan

volumes:
  keycloak-data:
  letsencrypt:
  keycloak-mariadb:
